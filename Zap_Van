# Create Tour class
class Tour:   
   def __init__(self, attributes, price):
      self.attributes = attributes
      self.price = price
   
   def getPrice(self):
      return self.price
   
   def getAttributes(self):
      return self.attributes

# Import values from form
orgType = input_data.get('orgType')
tierType = input_data.get('tierType')
tourDescription = input_data.get('tourDescription')
price = 0

# Determine Tier Type
if tierType == 'Option One':
    tierType = '4 to 8 passengers'
elif tierType == 'Option Two':
    tierType = '9 to 11 passengers'
elif tierType == 'Option Three':
    tierType = '12 to 14 passengers'

# Determine Org Type
if orgType == 'Option One':
    orgType = 'Local Community Group'
elif orgType == 'Option Two':
    orgType = 'Educational/Non-Profit Group'
elif orgType == 'Option Three':
    orgType = 'Corporate Group'
else:
    orgType = 'Other'

# Determine Tour Description
if tourDescription == 'Option One':
    tourDescription = 'Hidden History of Black Boston (2hr: North End, West End, South End, Roxbury)'
elif tourDescription == 'Option Two':
    tourDescription = 'David Walker City (2hr: Roxbury, Dorchester & Mattapan)'
elif tourDescription == 'Option Three':
    tourDescription = 'Boston Area Plantations: Parts UnBuilt and Unspoken (2hrs Medford, Cambridge, Roxbury and Dorchester)'
else:
    tourDescription = 'Customized'

#Tour Combinations and Prices
tours = [] 
tours.append(Tour(["Corporate Group", "4 to 8 passengers"], 800))
tours.append(Tour(["Corporate Group", "9 to 11 passengers"], 720))
tours.append(Tour(["Corporate Group", "12 to 14 passengers"], 680))

tours.append(Tour(["Educational/Non-Profit Group", "4 to 8 passengers"], 640))
tours.append(Tour(["Educational/Non-Profit Group", "9 to 11 passengers"], 608))
tours.append(Tour(["Educational/Non-Profit Group", "12 to 14 passengers"], 576))

tours.append(Tour(["Local Community Group", "4 to 8 passengers"], 360))
tours.append(Tour(["Local Community Group", "9 to 11 passengers"], 400))
tours.append(Tour(["Local Community Group", "12 to 14 passengers"], 380))

# Create Requested Tour
requestedTour = [orgType, tierType]

# Loop through tour combinations looking for correct tour
for item in tours:
   if(requestedTour == item.getAttributes()):
      price = item.getPrice()
      break

# Get today's date and due date for invoice
from datetime import date, timedelta
today = str(date.today())
dueDate = str(date.today() + timedelta(days=10))

output = {'tourType': 'Van', 'tierType': tierType, 'orgType': orgType, 'price': price, 'today': today, 'dueDate': dueDate, 'tourDescription': tourDescription}
